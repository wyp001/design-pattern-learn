package com.wyp.builder;

/**
 * 建造者模式
 * 背景 ：小张希望去中关村买一台组装的台式主机
 * 过程：
 * 1、中关村老板（Diretor）和小张（Client）进行需求沟通（买来打游戏？学习？看片？）
 * 2、了解需求后，电脑城老板将小张需要的主机划分为各个部件（Builder）的建造请求（CPU、主板......）
 * 3、指挥装机人员（ConcreteBuilder）去构建组件；
 * 4、将组件组装起来成小张需要的电脑（Product）
 *
 *  优点：
 *  1、良好的封装性：
 *      建造者对客户端屏蔽了产品内部组成的细节，客户端不用关心每一个具体的产品内部是如何实现的。
 * 2、符合开闭原则
 * 3、便于控制细节风险：
 *      由于建造者是相互独立的，因此可以对建造过程逐步细化，而不对其他的模块产生任何影响。
 *
 *  每一个具体建造者都相对独立，而与其他的具体建造者无关，因此可以很方便地替换具体建造者或增加新的具体建造者，
 *  用户使用不同的具体建造者即可得到不同的产品对象。
 *
 *  缺点：
 *  1、建造者模式所创建的产品一般具有较多的共同点，其组成部分相似；
 *     如果产品之间的差异性很大，则不适合使用建造者模式，因此其使用范围受到一定的限制。
 *  2、如果产品的内部变化复杂，可能会导致需要定义很多具体建造者类来实现这种变化，导致系统变得很庞大。
 */
public class Client {
    public static void main(String[] args) {
        // 步骤5：客户端调用-小张到电脑城找老板买电脑

        //逛了很久终于发现一家合适的电脑店
        //找到该店的老板和装机人员
        Director director = new Director();

        Builder builder = new ConcreteBuilder();

        //沟通需求后，老板叫装机人员去装电脑
        director.Construct(builder);

        //装完后，组装人员搬来组装好的电脑
        Computer computer = builder.GetComputer();
        //组装人员展示电脑给小张看
        computer.Show();
    }
}
